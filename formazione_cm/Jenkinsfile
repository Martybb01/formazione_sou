pipeline {
	agent any
	environment {
		CONTAINER_RUNTIME = "docker"
		DOCKER_REGISTRY = "localhost:5000"
		PODMAN_REGISTRY = "localhost:5001"
		IMAGE_TAG = "${env.BUILD_ID}"
		PATH = "/usr/local/bin:$PATH"
	}
	stages {
		stage('Setup') {
			steps {
				script {
					registry = env.CONTAINER_RUNTIME == "docker" ? env.DOCKER_REGISTRY : env.PODMAN_REGISTRY
					isDocker = env.CONTAINER_RUNTIME == "docker"
				}
			}
		}
		stage('Build and Push Alpine image') {
			steps {
				dir('formazione_cm/alpine') {
					script {
						if (isDocker) {
							def alpine_image = docker.build("${registry}/alpine:${IMAGE_TAG}")
							alpine_image.push()
						} else {
							build_and_push_image("${registry}/alpine:${IMAGE_TAG}", "podman")
						}
					}
				}
			}
		}
		stage('Build and Push Rocky image') {
			steps {
				dir('formazione_cm/rocky') {
					script {
						if (isDocker) {
							def rocky_image = docker.build("${registry}/rocky:${IMAGE_TAG}")
							rocky_image.push()
						} else {
							build_and_push_image("${registry}/rocky:${IMAGE_TAG}", "podman")
						}
					}
				}
			}
		}
		stage('Check PATH and Ansible') {
    		steps {
        		sh 'echo $PATH'
        		sh 'which ansible-playbook || echo "ansible-playbook not found"'
    		}
		}
		stage('Deploy containers') {
			steps {
				dir('formazione_cm') {
					withCredentials([string(credentialsId: 'ansible_vault_pwd', variable: 'VAULT_PASSWORD')]) {
                        script {
                            writeFile file: 'vault_pwd_file', text: "${VAULT_PASSWORD}"
                            sh '''
                                chmod 600 ./id_key_genuser
                                ansible-playbook -i inventory deploy_containers.yml \
                                --vault-password-file vault_pwd_file \
                                -e image_tag=${IMAGE_TAG}
                            '''
                            sh 'rm -f vault_pwd_file'
                        }
					}
				}
			}
		}
	}
	post {
		always {
			cleanWs()
		}
	}
}

def build_and_push_image(image, runtime) {
	sh "${runtime} build -t ${image} ."
	sh "${runtime} push ${image}"
}

// withCredentials([string(credentialsId: 'ansible-vault-password', variable: 'VAULT_PASSWORD')]) {
//                     script {
//                         sh """
//                         # Decrypt the key
//                         ansible-vault decrypt ./id_key_genuser --vault-password-file <(echo $VAULT_PASSWORD)

//                         # Run the playbook
//                         ansible-playbook -i inventory deploy_containers.yml --vault-password-file <(echo $VAULT_PASSWORD) -vvv

//                         # Encrypt the key again
//                         ansible-vault encrypt ./id_key_genuser --vault-password-file <(echo $VAULT_PASSWORD)
//                         """
//                     }
//                 }

// ansiblePlaybook(
//                         	playbook: 'formazione_cm/deploy_containers.yml',
//                         	inventory: 'inventory',
//                         	vaultCredentialsId: 'ansible_vault_pwd',
//                         	extraVars: [
//                             	image_tag: env.IMAGE_TAG
//                         	]
//                     	)
